In Python, variables are used to store data values. Here are some key points and examples about variables in Python:

### Variable Naming Rules
- Variable names must start with a letter (a-z, A-Z) or an underscore (_).
- The remainder of the variable name may consist of letters, numbers, and underscores.
- Variable names are case-sensitive (`myVar`, `myvar`, and `MYVAR` are different).

### Assigning Values to Variables
In Python, variables are assigned using the equal sign (`=`). For example:
```python
x = 5
name = "John"
is_active = True
```

### Dynamic Typing
Python is a dynamically typed language, which means you don't need to declare the type of a variable.
 The type is inferred at runtime based on the value assigned:
```python
x = 5          # x is an integer
x = "Hello"    # x is now a string
```

### Multiple Assignments
You can assign values to multiple variables in one line:
```python
a, b, c = 1, 2, 3
```

You can also assign the same value to multiple variables:
```python
x = y = z = 0
```

### Types of Variables
Variables can hold values of different data types, such as:

1. **Numbers**
   - Integers
   ```python
   age = 25
   ```
   - Floating-point numbers
   ```python
   height = 5.9
   ```

2. **Strings**
   ```python
   name = "Alice"
   ```
   
3. **Booleans**
   ```python
   is_student = True
   ```
   
4. **Lists**
   ```python
   fruits = ["apple", "banana", "cherry"]
   ```

5. **Tuples**
   ```python
   coordinates = (10.0, 20.0)
   ```

6. **Dictionaries**
   ```python
   student = {"name": "John", "age": 20}
   ```

7. **Sets**
   ```python
   unique_numbers = {1, 2, 3, 4, 5}
   ```

### Changing Variable Types
You can change the type of a variable by assigning a value of a different type:
```python
x = 10      # x is an integer
x = "ten"   # x is now a string
```

### Example Code
Here is a simple Python script that demonstrates variable assignment and usage:
```python
# Assigning values to variables
name = "Alice"
age = 30
height = 5.5
is_student = False

# Printing variable values
print("Name:", name)
print("Age:", age)
print("Height:", height)
print("Is student:", is_student)

# Changing variable values
age = 31
is_student = True

# Printing updated values
print("Updated Age:", age)
print("Updated Is student:", is_student)
```

### Checking Variable Type
You can check the type of a variable using the `type()` function:
```python
x = 10
print(type(x))  # Output: <class 'int'>

y = "Hello"
print(type(y))  # Output: <class 'str'>
```

### Best Practices
- Use meaningful variable names to make your code more readable.
- Follow the naming conventions (e.g., `snake_case` for variable names).
- Avoid using reserved words as variable names (e.g., `if`, `while`, `class`).

By understanding these basics, you can effectively use variables in your Python programs to store and manipulate data.